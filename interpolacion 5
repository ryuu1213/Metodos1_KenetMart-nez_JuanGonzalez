import pandas as pd
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

datos= pd.read_csv("https://raw.githubusercontent.com/asegura4488/Database/main/MetodosComputacionalesReforma/InterpolacionNewtonNoequi.csv", dtype= float)
X_= np.float64(datos.X)
Y_= np.float64(datos.Y)

x_ = np.linspace(0,6,100)



def EncontrarTodasPendientes(X, Y):
    pendientes= []
    for i in range(1, len(X)):
        pendiente = (Y[i] - Y[i-1]) / (X[i])
        pendientes.append(pendiente)
    return pendientes

pendientes= EncontrarTodasPendientes(X_, Y_)


def PendientePolinomio(pendientes, X, m):
    pens= pendientes[0:m]
    n= len(pens)
    if m == 1:
        return pendientes[0]
    for i in range(1, n):
        n= len(pens)
        pen= []
        indices = np.linspace(0, n-1, n)
        for j in indices:
            if j > 0:
                print( X[n])
                entrada = pens[int(j)] - pens[int(j)-1]
                p = entrada / (X[n])
                pen.append(p)
        pens = pen
    return pens[0]


def polinomio(x, y, X):
    ps= y[0]
    for i in range(1, len(x)):
        m= PendientePolinomio(pendientes, x, i)
        h= 1
        for j in range(1, i+1):
            h *= (X - x[j-1])
        p= m*h
        ps += p
    return ps


y_= polinomio(X_,Y_,x_)

plt.plot(x_,y_)
plt.scatter(X_,Y_)
plt.ylim((-30, 12))

x= sp.Symbol("x", real= True)
y= polinomio(X_, Y_, x)
print(y)
